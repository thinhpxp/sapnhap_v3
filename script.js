document.addEventListener('DOMContentLoaded', () => {
    // === PH√ÅT HI·ªÜN NG√îN NG·ªÆ HI·ªÜN T·∫†I ===
    const currentLang = document.documentElement.lang || 'vi';
    const translations = window.translations || {};
    const t = (key, fallback = '') => translations[key] || fallback;

    // === KH√ìA API (CH·ªà D√ÄNH CHO MYSTERY BOX) ===
    const UNSPLASH_ACCESS_KEY = 'Ln1_SF9l3ee_fsc320rUZjfB5fgSVCZlMg2JbSdh_XY';

    // === DOM Elements ===
    const lookupBtn = document.getElementById('lookup-btn');
    const resultContainer = document.getElementById('result-container');
    const oldAddressDisplay = document.getElementById('old-address-display');
    const newAddressDisplay = document.getElementById('new-address-display');
    const notificationArea = document.getElementById('notification-area');
    const mysteryBox = document.getElementById('mystery-box');
    const spinner = mysteryBox ? mysteryBox.querySelector('.loading-spinner') : null;
    const modeToggle = document.getElementById('mode-toggle');
    const lookupDescription = document.getElementById('lookup-description');
    const provinceSelectEl = document.getElementById('province-select');
    const districtSelectEl = document.getElementById('district-select');
    const communeSelectEl = document.getElementById('commune-select');
    const newProvinceSelectEl = document.getElementById('new-province-select');
    const newCommuneSelectEl = document.getElementById('new-commune-select');
    // Element cho switch accent
    const accentToggleContainer = document.getElementById('accent-toggle-container');
    const accentToggle = document.getElementById('accent-toggle');
    const forwardControls = document.getElementById('forward-controls');
    const reverseControls = document.getElementById('reverse-controls');
     // TH√äM M·ªöI: C√°c element cho n√∫t v√† modal ƒë·ªÉ xem ƒë·ªãa ch·ªâ h√†nh ch√≠nh
    const adminCenterActions = document.getElementById('admin-center-actions');
    const showAdminCentersBtn = document.getElementById('show-admin-centers-btn');
    const adminCenterModal = document.getElementById('admin-center-modal');
    const modalCloseBtn = document.getElementById('modal-close-btn');
    const modalBody = document.getElementById('modal-body');
    // Khung g√≥p √Ω
    const feedbackInput = document.getElementById('feedback-input');
    const feedbackSendBtn = document.getElementById('feedback-send-btn');
    const feedbackMessage = document.getElementById('feedback-message');
    // L·ªãch s·ª≠ s√°p nh·∫≠p
    const historyDisplay = document.getElementById('history-display');

    // === BI·ªÇU T∆Ø·ª¢NG SVG ===
    const copyIconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16"><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/></svg>`;
    const copiedIconSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-check" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"/><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/></svg>`;

    // === QU·∫¢N L√ù TR·∫†NG TH√ÅI ===
    let allProvincesData = [];
    let isReverseMode = false;
    let newWardCodeForModal = null; // TH√äM M·ªöI: Bi·∫øn ƒë·ªÉ l∆∞u m√£ x√£ m·ªõi cho modal
    let newProvinceCodeForModal = null;  // TH√äM M·ªöI: Bi·∫øn ƒë·ªÉ l∆∞u m√£ t·ªânh m·ªõi cho modal
    let removeAccents = false; // M·∫∑c ƒë·ªãnh l√† T·∫ÆT (hi·ªÉn th·ªã c√≥ d·∫•u)
    let provinceChoices, districtChoices, communeChoices;
    let newProvinceChoices, newCommuneChoices;

    // === C√ÅC H√ÄM TI·ªÜN √çCH ===
    function toNormalizedString(str) {
        if (!str) return '';
        str = str.replace(/ƒë/g, 'd').replace(/ƒê/g, 'D');
        return str.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
    }
    function showNotification(message, type = 'loading') {
        if (notificationArea) {
            notificationArea.textContent = message;
            notificationArea.className = type;
            notificationArea.classList.remove('hidden');
        }
    }
    function hideNotification() {
        if (notificationArea) {
            notificationArea.classList.add('hidden');
            notificationArea.textContent = '';
        }
    }
    function updateChoices(choicesInstance, placeholder, data, valueKey = 'code', labelKey = 'name') {
        choicesInstance.clearStore();
        choicesInstance.setChoices(
            [{ value: '', label: placeholder, selected: true, disabled: true }, ...data.map(item => ({ value: item[valueKey], label: item[labelKey] }))],
            'value', 'label', false
        );
    }
    function resetChoice(choicesInstance, placeholder) {
        choicesInstance.clearStore();
        choicesInstance.setChoices([{ value: '', label: placeholder, selected: true, disabled: true }], 'value', 'label', false);
        choicesInstance.disable();
    }

    // === H√ÄM D·ªäCH THU·∫¨T & B·∫¢N ƒê·ªäA H√ìA ===
    function applyTranslations() {
        // D·ªãch n·ªôi dung text (innerHTML)
        document.querySelectorAll('[data-i18n-key]').forEach(el => {
            const key = el.getAttribute('data-i18n-key');
            el.innerHTML = t(key, el.innerHTML);
        });

        // === TH√äM M·ªöI: D·ªãch c√°c thu·ªôc t√≠nh placeholder ===
        document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
            const key = el.getAttribute('data-i18n-placeholder');
            const translation = t(key);
            if (translation) {
                el.setAttribute('placeholder', translation);
            }
        });

        // C·∫≠p nh·∫≠t c√°c thu·ªôc t√≠nh meta v√† title
        document.title = t('pageTitle', "Tra C·ª©u S√°p Nh·∫≠p");
        const descEl = document.querySelector('meta[name="description"]');
        if (descEl) descEl.setAttribute('content', t('pageDescription'));
    }

    // H√†m quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã t√™n n√†o d·ª±a tr√™n ng√¥n ng·ªØ v√† tr·∫°ng th√°i switch
    function localize(name, en_name) {
        if (currentLang === 'en') {
            return removeAccents ? (en_name || toNormalizedString(name)) : name;
        }
        return name;
    }

    // === C√ÅC H√ÄM KH·ªûI T·∫†O & GIAO DI·ªÜN ===
    function initialize() {
        applyTranslations();

        if (currentLang === 'en' && accentToggleContainer && accentToggle) {
            accentToggleContainer.classList.remove('hidden');
            accentToggle.checked = removeAccents; // C·∫≠p nh·∫≠t tr·∫°ng th√°i switch
        }

        const choicesConfig = { searchEnabled: true, itemSelectText: t('selectChoice', 'Ch·ªçn'), removeItemButton: true };

        // H·ªßy c√°c instance c≈© n·∫øu c√≥ ƒë·ªÉ tr√°nh l·ªói "already initialised"
        if(provinceChoices) provinceChoices.destroy();
        if(districtChoices) districtChoices.destroy();
        if(communeChoices) communeChoices.destroy();
        if(newProvinceChoices) newProvinceChoices.destroy();
        if(newCommuneChoices) newCommuneChoices.destroy();
        // X·ª≠ l√Ω l·ªãch s·ª≠
        if (window.allProvincesData && window.allProvincesData.length > 0) {
            window.allProvincesData.sort((a, b) => a.code - b.code);
            // C·∫¨P NH·∫¨T: Th√™m bi·ªÉu t∆∞·ª£ng cho x√£ c√≥ l·ªãch s·ª≠
            const localizedOldData = window.allProvincesData.map(province => ({
                ...province,
                districts: province.districts.map(district => ({
                    ...district,
                     wards: district.wards.map(ward => {
                        let name = ward.name;
                        if (ward.has_history) name = `${name} üìú`;
                        if (ward.is_split_case) name = `${name} Ï™º`; // Bi·ªÉu t∆∞·ª£ng cho chia t√°ch
                        return { ...ward, name: name };
                    })
                }))
            }));
            updateChoices(provinceChoices, t('oldProvincePlaceholder'), localizedOldData);
        } else {
            showNotification(t('errorLoadOldData'), "error");
        }

        provinceChoices = new Choices(provinceSelectEl, { ...choicesConfig });
        districtChoices = new Choices(districtSelectEl, { ...choicesConfig });
        communeChoices = new Choices(communeSelectEl, { ...choicesConfig });
        newProvinceChoices = new Choices(newProvinceSelectEl, { ...choicesConfig });
        newCommuneChoices = new Choices(newCommuneSelectEl, { ...choicesConfig });

        resetChoice(districtChoices, t('oldDistrictPlaceholder'));
        resetChoice(communeChoices, t('oldCommunePlaceholder'));
        resetChoice(newCommuneChoices, t('newCommunePlaceholder'));

        addEventListeners();
        loadOldDataDropdowns(); //G·ªçi ƒë·ªãa ch·ªâ m·ªõi
        loadNewProvincesDropdown(); //G·ªçi ƒë·ªãa ch·ªâ c≈©
        // goÃ£i haÃÄm hi√™Ãân thiÃ£ l∆∞∆°Ã£t tra c∆∞ÃÅu GOOGLE ANALYTICS
        displayEventCount();
        setInterval(displayEventCount, 30000);
        // GOÃ£I HAÃÄM HI√äÃâN THIÃ£ GOOGLE REAL TIME
        displayRealtimeLocations(); // H√†m m·ªõi
        // T·ª± ƒë·ªông l√†m m·ªõi sau m·ªói 60 gi√¢y
        setInterval(displayRealtimeLocations, 75000);
        setTimeout(() => {
            loadInitialData();
        }, 0);
    }

     // TH√äM M·ªöI: H√†m ri√™ng ƒë·ªÉ t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
    function loadInitialData() {
        if (window.allProvincesData && window.allProvincesData.length > 0) {
            window.allProvincesData.sort((a, b) => a.code - b.code);
            updateChoices(provinceChoices, t('oldProvincePlaceholder'), window.allProvincesData);
        } else {
            showNotification(t('errorLoadOldData', "L·ªói t·∫£i d·ªØ li·ªáu c≈©."), "error");
        }

        resetChoice(districtChoices, t('oldDistrictPlaceholder'));
        resetChoice(communeChoices, t('oldCommunePlaceholder'));
        resetChoice(newCommuneChoices, t('newCommunePlaceholder'));

        loadNewProvincesDropdown();
        displayEventCount();
        displayRealtimeLocations();
        setInterval(displayRealtimeLocations, 90000);
    }
    // TH√äM M·ªöI: H√†m t·∫£i d·ªØ li·ªáu cho dropdown C≈©
    async function loadOldDataDropdowns() {
        resetChoice(provinceChoices, t('oldProvinceLoading', 'ƒêang t·∫£i t·ªânh/th√†nh...'));
        try {
            const response = await fetch('/api/get-old-data');
            if(!response.ok) throw new Error(t('errorLoadOldData'));

            allProvincesData = await response.json(); // L∆∞u d·ªØ li·ªáu v√†o bi·∫øn c·ª•c b·ªô

            const localizedOldData = allProvincesData.map(province => ({
                ...province,
                name: localize(province.name, null),
                districts: province.districts.map(district => ({
                    ...district,
                    name: localize(district.name, null),
                    wards: district.wards.map(ward => ({ ...ward, name: localize(ward.name, null) }))
                }))
            }));

            updateChoices(provinceChoices, t('oldProvincePlaceholder'), localizedOldData);
            provinceChoices.enable();

        } catch (error) {
            console.error(error);
            resetChoice(provinceChoices, t('errorLoadOldData'));
            showNotification(error.message, 'error');
        }
    }


    async function loadNewProvincesDropdown() {
        resetChoice(newProvinceChoices, t('newProvinceLoading'));
        try {
            const response = await fetch('/api/get-new-provinces');
            if(!response.ok) throw new Error(t('errorFetchNewProvinces'));
            let data = await response.json();
            const localizedData = data.map(province => ({
                ...province,
                name: localize(province.name, province.en_name)
            }));
            updateChoices(newProvinceChoices, t('newProvincePlaceholder'), localizedData, 'province_code', 'name');
            newProvinceChoices.enable();
        } catch (error) {
            console.error(error);
            resetChoice(newProvinceChoices, t('newProvinceError'));
        }
    }

    function toggleLookupUI() {
        isReverseMode = modeToggle.checked;
        forwardControls.classList.toggle('hidden', isReverseMode);
        reverseControls.classList.toggle('hidden', !isReverseMode);
        resultContainer.classList.add('hidden');
        lookupBtn.disabled = true;
        lookupDescription.textContent = isReverseMode
            ? t('lookupDescriptionNewToOld')
            : t('lookupDescriptionOldToNew');
    }

    // === L·∫ÆNG NGHE S·ª∞ KI·ªÜN ===
    function addEventListeners() {
        if(modeToggle) modeToggle.addEventListener('change', toggleLookupUI);
        if(lookupBtn) lookupBtn.addEventListener('click', () => {
            if (isReverseMode) handleReverseLookup();
            else handleForwardLookup();
        });
        if (mysteryBox) mysteryBox.addEventListener('click', fetchRandomImage);
        if(resultContainer) resultContainer.addEventListener('click', handleCopy);

        if (accentToggle) {
            accentToggle.addEventListener('change', () => {
                removeAccents = accentToggle.checked;
                initialize(); // Kh·ªüi t·∫°o l·∫°i to√†n b·ªô giao di·ªán
            });
        }

        if(provinceSelectEl) provinceSelectEl.addEventListener('choice', (event) => {
            const selectedProvince = allProvincesData.find(p => p.code == event.detail.value);
            if (selectedProvince && selectedProvince.districts) {
                const localizedDistricts = selectedProvince.districts.map(d => ({...d, name: localize(d.name, null)}));
                updateChoices(districtChoices, t('oldDistrictPlaceholder'), localizedDistricts);
            }
            districtChoices.enable();
            resetChoice(communeChoices, t('oldCommunePlaceholder'));
            lookupBtn.disabled = true;
        });
        if(districtSelectEl) districtSelectEl.addEventListener('choice', (event) => {
            const provinceCode = provinceChoices.getValue(true);
            const selectedProvince = allProvincesData.find(p => p.code == provinceCode);
            const selectedDistrict = selectedProvince?.districts.find(d => d.code == event.detail.value);
            if (selectedDistrict && selectedDistrict.wards) {
                const localizedWards = selectedDistrict.wards.map(w => ({...w, name: localize(w.name, null)}));
                updateChoices(communeChoices, t('oldCommunePlaceholder'), localizedWards);
            }
            communeChoices.enable();
            lookupBtn.disabled = true;
        });
        if(communeSelectEl) communeSelectEl.addEventListener('choice', (event) => {
            lookupBtn.disabled = !event.detail.value;
        });

        if(newProvinceSelectEl) newProvinceSelectEl.addEventListener('choice', async (event) => {
            const provinceCode = event.detail.value;
            if (!provinceCode) return;
            resetChoice(newCommuneChoices, t('newCommuneLoading'));
            lookupBtn.disabled = true;
            try {
                const response = await fetch(`/api/get-new-wards?province_code=${provinceCode}`);
                if(!response.ok) throw new Error(t('newCommuneError'));
                let data = await response.json();
                const localizedData = data.map(ward => ({
                    ...ward,
                    name: localize(ward.name, ward.en_name)
                }));
                updateChoices(newCommuneChoices, t('newCommunePlaceholder'), localizedData, 'ward_code', 'name');
                newCommuneChoices.enable();
            } catch (error) {
                console.error(error);
                resetChoice(newCommuneChoices, t('newCommuneError'));
                showNotification(error.message, 'error');
            }
        });
        if(newCommuneSelectEl) newCommuneSelectEl.addEventListener('choice', (event) => {
            lookupBtn.disabled = !event.detail.value;
        });

        // === TH√äM M·ªöI: C√°c s·ª± ki·ªán cho n√∫t v√† modal ===
        if (showAdminCentersBtn) {
            showAdminCentersBtn.addEventListener('click', handleShowAdminCenters);
        }
        if (modalCloseBtn) {
            modalCloseBtn.addEventListener('click', closeModal);
        }
        if (adminCenterModal) {
            // ƒê√≥ng modal khi click v√†o l·ªõp ph·ªß b√™n ngo√†i
            adminCenterModal.addEventListener('click', (event) => {
                if (event.target === adminCenterModal) {
                    closeModal();
                }
            });
        }
         // === TH√äM M·ªöI: L·∫Øng nghe s·ª± ki·ªán cho form G√≥p √Ω ===
        if (feedbackSendBtn) {
            feedbackSendBtn.addEventListener('click', handleSubmitFeedback);
        }
        if (feedbackInput) {
            // Cho ph√©p g·ª≠i b·∫±ng ph√≠m Enter
            feedbackInput.addEventListener('keydown', (event) => {
                if (event.key === 'Enter') {
                    handleSubmitFeedback();
                }
            });
        }
    }

   // === LOGIC TRA C·ª®U CH√çNH ===
     async function handleForwardLookup() {
        const selectedProvince = provinceChoices.getValue(true);
        const selectedDistrict = districtChoices.getValue(true);
        const selectedCommune = communeChoices.getValue(true);

        if (!selectedProvince || !selectedDistrict || !selectedCommune) {
            alert(t('alertSelectOldCommune'));
            return;
        }

        const oldWardCode = selectedCommune;
        const fullOldAddress = `${communeChoices.getValue().label}, ${districtChoices.getValue().label}, ${provinceChoices.getValue().label}`;

        // --- KH√îI PH·ª§C: Hi·ªÉn th·ªã m√£ code c≈© ---
        const oldCodes = `${selectedCommune}, ${selectedDistrict}, ${selectedProvince}`;
        let oldAddressHtml = `
            <div class="address-line"><p><span class="label">${t('oldAddressLabel')}</span> ${fullOldAddress}</p></div>
            <div class="address-codes"><span class="label">Old Code:</span> ${oldCodes}</div>`;

        oldAddressDisplay.innerHTML = oldAddressHtml;
        newAddressDisplay.innerHTML = `<p>${t('lookingUp')}</p>`;
        resultContainer.classList.remove('hidden');

         // Reset tr·∫°ng th√°i c·ªßa ch·ª©c nƒÉng Xem ƒë·ªãa ch·ªâ h√†nh ch√≠nh
        if (adminCenterActions) adminCenterActions.classList.add('hidden');
        if (historyDisplay) historyDisplay.classList.add('hidden');
        newWardCodeForModal = null;
        newProvinceCodeForModal = null;

        try {
            // === GHI CH√ö C·ªêT L√ïI 1: KI·ªÇM TRA C·ªú is_split_case ===
            // T√¨m l·∫°i d·ªØ li·ªáu g·ªëc c·ªßa x√£ ƒë√£ ch·ªçn ƒë·ªÉ ki·ªÉm tra c·ªù is_split_case
            const provinceData = allProvincesData.find(p => p.code == provinceChoices.getValue(true));
            // Ki·ªÉm tra null an to√†n
            const districtData = provinceData ? provinceData.districts.find(d => d.code == districtChoices.getValue(true)) : null;
            const wardData = districtData ? districtData.wards.find(w => w.code == oldWardCode) : null;
            const isSplit = wardData && wardData.is_split_case === true;

            // === GHI CH√ö C·ªêT L√ïI 2: X√ÇY D·ª∞NG URL API ƒê·ªòNG ===
            // G·ª≠i th√™m is_split=true n·∫øu ƒë√¢y l√† tr∆∞·ªùng h·ª£p chia t√°ch
            const apiUrl = `/api/lookup-forward?code=${oldWardCode}${isSplit ? '&is_split=true' : ''}`;

            const response = await fetch(apiUrl);
            //const response = await fetch(`/api/lookup-forward?code=${oldWardCode}`);
            const data = await response.json();

            if (!response.ok) throw new Error(data.error || 'Server error');

            // === GHI CH√ö THAY ƒê·ªîI: X·ª¨ L√ù V√Ä HI·ªÇN TH·ªä L·ªäCH S·ª¨ ===
            if (data.history && data.history.length > 0) {
                const historyHtml = data.history.map(entry => {
                    // ƒê·ªãnh d·∫°ng l·∫°i ng√†y th√°ng cho d·ªÖ ƒë·ªçc
                    const date = new Date(entry.change_date).toLocaleDateString(currentLang === 'vi' ? 'vi-VN' : 'en-US');
                    // L·∫•y b·∫£n d·ªãch v√† thay th·∫ø c√°c placeholder
                    return `<li>${t('historyEntry')
                                .replace('{date}', date)
                                .replace('{from}', entry.original_ward_name)
                                .replace('{to}', entry.intermediate_ward_name)}</li>`;
                }).join('');

                historyDisplay.innerHTML = `<h4>${t('historyTitle')}</h4><ul>${historyHtml}</ul>`;
                historyDisplay.classList.remove('hidden');
            }
            // =======================================================

            if (!data.changed) {
                newAddressDisplay.innerHTML = `<p class="no-change">${t('noChangeMessage')}</p>`;
            }else if (data.is_split_case) {
                // --- X·ª≠ l√Ω hi·ªÉn th·ªã cho tr∆∞·ªùng h·ª£p CHIA T√ÅCH ---
                const splitHtml = data.split_results.map(result => {
                    if (result.new_address) {
                        const newAddress = `${result.new_address.new_ward_name}, ${result.new_address.new_province_name}`;
                        return `<li><b>${result.description}:</b> ${t('mergedInto', 's√°p nh·∫≠p th√†nh')} <b>${newAddress}</b></li>`;
                    }
                    return `<li><b>${result.description}:</b> ${t('noMergeInfo', 'Kh√¥ng c√≥ th√¥ng tin s√°p nh·∫≠p.')}</li>`;
                }).join('');

                newAddressDisplay.innerHTML = `
                    <p class="split-case-note">${t('splitCaseNote', 'L∆∞u √Ω: ƒê∆°n v·ªã n√†y ƒë∆∞·ª£c chia t√°ch v√† s√°p nh·∫≠p v√†o nhi·ªÅu n∆°i.')}</p>
                    <ul class="split-results-list">${splitHtml}</ul>
                `;
            }
             else if (data.new_ward_name){ // Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ s√°p nh·∫≠p cu·ªëi c√πng kh√¥ng
                const newWardName = localize(data.new_ward_name, data.new_ward_en_name);
                const newProvinceName = localize(data.new_province_name, data.new_province_en_name);
                //const newAddressForDisplay = `${newWardName}, ${newProvinceName}`;
                const newCodesForward = `${data.new_ward_code}, ${data.new_province_code}`;
                const newAddressForDisplay = `${data.new_ward_name}, ${data.new_province_name}`;
                //const newCodes = `${data.new_ward_code}, ${data.new_province_code}`;
                // --- KH√îI PH·ª§C: Hi·ªÉn th·ªã m√£ code m·ªõi ---
                const newAddressForCopy = `${newAddressForDisplay} (Codes: ${newCodesForward})`;

                let resultsHtml = `
                    <div class="address-line">
                        <p><span class="label">${t('newAddressLabel')}</span> ${newAddressForDisplay}</p>
                        <button class="copy-btn" title="Copy" data-copy-text="${newAddressForCopy}">${copyIconSvg}</button>
                    </div>
                    <div class="address-codes"><span class="label">New Code:</span> ${newCodesForward}</div>`;
                newAddressDisplay.innerHTML = resultsHtml;

                // === TH√äM M·ªöI: L∆∞u m√£ v√† hi·ªÉn th·ªã n√∫t ƒë·ªÉ Xem ƒë·ªãa ch·ªâ h√†nh ch√≠nh
                newWardCodeForModal = data.new_ward_code;
                newProvinceCodeForModal = data.new_province_code;
                if (adminCenterActions) adminCenterActions.classList.remove('hidden');
            }
        } catch (error) {
            console.error('L·ªói khi tra c·ª©u xu√¥i:', error);
            newAddressDisplay.innerHTML = `<p class="error">${error.message}</p>`;
        }
    }

    async function handleReverseLookup() {
        const selectedNewProvince = newProvinceChoices.getValue();
        const selectedNewCommune = newCommuneChoices.getValue();
        if (!selectedNewCommune || !selectedNewCommune.value) {
             alert(t('alertSelectNewCommune'));
             return;
        }

        const newWardCode = selectedNewCommune.value;
        const fullNewAddress = `${selectedNewCommune.label}, ${selectedNewProvince.label}`;

        oldAddressDisplay.innerHTML = '';
        newAddressDisplay.innerHTML = `<p>${t('lookingUp')}</p>`;
        resultContainer.classList.remove('hidden');

        if (adminCenterActions) adminCenterActions.classList.add('hidden');
        newWardCodeForModal = null;
        newProvinceCodeForModal = null; // Th√™m reset cho an to√†n

        try {
            const response = await fetch(`/api/lookup-reverse?code=${newWardCode}`);
            const data = await response.json();
            if (!response.ok) throw new Error(data.error || 'Server error');

            if (data.length > 0) {
                const newCodesReverse = `${data[0].new_ward_code}, ${data[0].new_province_code}`;
                const newAddressForCopy = `${fullNewAddress} (Codes: ${newCodesReverse})`;
                let newAddressHtml = `
                    <div class="address-line">
                        <p><span class="label">${t('newAddressLabel').replace(':', '')}</span> ${fullNewAddress}</p>
                        <button class="copy-btn" title="Copy" data-copy-text="${newAddressForCopy}">${copyIconSvg}</button>
                    </div>
                    <div class="address-codes"><span class="label">New Code:</span> ${newCodesReverse}</div>`;
                oldAddressDisplay.innerHTML = newAddressHtml;

                const oldUnitsFullAddresses = data.map(record => {
                    let historyHtml = '';

                    // GHI CH√ö S·ª¨A L·ªñI: Ki·ªÉm tra history c√≥ t·ªìn t·∫°i v√† kh√¥ng ph·∫£i null
                    if (record.history) {
                        const date = new Date(record.history.change_date).toLocaleDateString(currentLang === 'vi' ? 'vi-VN' : 'en-US');
                        const historyItem = `<li>${t('historyEntry')
                                    .replace('{date}', date)
                                    .replace('{from}', record.history.original_ward_name)
                                    .replace('{to}', record.history.intermediate_ward_name)}</li>`;

                        // GHI CH√ö S·ª¨A L·ªñI: D√πng class thay v√¨ id ƒë·ªÉ tr√°nh tr√πng l·∫∑p
                        historyHtml = `
                            <div class="history-display" style="margin-top: 8px;">
                                <ul>${historyItem}</ul>
                            </div>
                        `;
                    }
                    const ward = localize(record.old_ward_name, record.old_ward_en_name);
                    const district = localize(record.old_district_name, record.old_district_en_name);
                    const province = localize(record.old_province_name, record.old_province_en_name);
                    const oldCodes = `${record.old_ward_code}, ${record.old_district_code}, ${record.old_province_code}`;
                    return `
                        <li>
                            ${ward}, ${district}, ${province}
                            <div class="address-codes"><span class="label">Old Code:</span> ${oldCodes}</div>
                            ${historyHtml}
                        </li>`;
                }).join('');
                newAddressDisplay.innerHTML = `<p class="label">${t('mergedFromLabel')}</p><ul class="old-units-list">${oldUnitsFullAddresses}</ul>`;

                // === GHI CH√ö S·ª¨A L·ªñI: Di chuy·ªÉn kh·ªëi code n√†y v√†o b√™n trong `if` ===
                // Ch·ªâ l∆∞u m√£ v√† hi·ªÉn th·ªã n√∫t khi ch·∫Øc ch·∫Øn c√≥ d·ªØ li·ªáu
                newWardCodeForModal = data[0].new_ward_code;
                newProvinceCodeForModal = data[0].new_province_code;
                if (adminCenterActions) adminCenterActions.classList.remove('hidden');
                // =============================================================

            } else {
                oldAddressDisplay.innerHTML = `<div class="address-line"><p><span class="label">${t('newAddressLabel').replace(':', '')}</span> ${fullNewAddress}</p></div>`;
                newAddressDisplay.innerHTML = `<p class="no-change">${t('noDataFoundMessage')}</p>`;
            }
        } catch (error) {
             console.error('L·ªói khi tra c·ª©u ng∆∞·ª£c:', error);
             oldAddressDisplay.innerHTML = '';
             newAddressDisplay.innerHTML = `<p class="error">${error.message}</p>`;
        }
    }

    // === TH√äM M·ªöI: H√†m x·ª≠ l√Ω g·ª≠i G√≥p √Ω ===
    async function handleSubmitFeedback() {
        if (!feedbackInput || !feedbackSendBtn || !feedbackMessage) return;

        const message = feedbackInput.value.trim();
        if (message.length === 0) {
            return; // Kh√¥ng l√†m g√¨ n·∫øu input r·ªóng
        }
        // GHI CH√ö THAY ƒê·ªîI: B·∫Øt ƒë·∫ßu thu th·∫≠p ng·ªØ c·∫£nh
        const context = {};

        // X√°c ƒë·ªãnh ch·∫ø ƒë·ªô tra c·ª©u hi·ªán t·∫°i
        context.mode = isReverseMode ? 'Tra c·ª©u ng∆∞·ª£c' : 'Tra c·ª©u xu√¥i';

        // L·∫•y th√¥ng tin t·ª´ c√°c dropdown ƒëang ƒë∆∞·ª£c ch·ªçn
        if (isReverseMode) {
            const newProvince = newProvinceChoices.getValue();
            if (newProvince) {
                context.province = { code: newProvince.value, name: newProvince.label };
            }
        } else {
            const oldProvince = provinceChoices.getValue();
            if (oldProvince) {
                context.province = { code: oldProvince.value, name: oldProvince.label };
            }
            const oldDistrict = districtChoices.getValue();
            if (oldDistrict) {
                context.district = { code: oldDistrict.value, name: oldDistrict.label };
            }
        }// K·∫øt th√∫c thu th·∫≠p ng·ªØ c·∫£nh
        // V√¥ hi·ªáu h√≥a form ƒë·ªÉ tr√°nh g·ª≠i nhi·ªÅu l·∫ßn
        feedbackSendBtn.disabled = true;
        feedbackInput.disabled = true;
        feedbackSendBtn.textContent = '...';

        try {
            const response = await fetch('/api/submit-feedback', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message, context: context }),
            });

            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
            }

            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            feedbackMessage.textContent = t('feedbackSuccess', 'G·ª≠i th√†nh c√¥ng!');
            feedbackMessage.className = 'success';
            feedbackMessage.classList.remove('hidden');
            feedbackInput.value = ''; // X√≥a n·ªôi dung input

        } catch (error) {
            console.error('L·ªói khi g·ª≠i g√≥p √Ω:', error);
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            feedbackMessage.textContent = t('feedbackError', 'G·ª≠i th·∫•t b·∫°i.');
            feedbackMessage.className = 'error';
            feedbackMessage.classList.remove('hidden');
        } finally {
            setTimeout(() => {
                feedbackSendBtn.disabled = false;
                feedbackInput.disabled = false;
                feedbackSendBtn.textContent = t('feedbackSendBtn', 'G·ª≠i');
                feedbackMessage.classList.add('hidden');
            }, 4000);
        }
    }

    // === H√ÄM PH·ª§ TR·ª¢ KH√ÅC ===
    function handleCopy(event) {
        const button = event.target.closest('.copy-btn');
        if (!button) return;
        const textToCopy = button.dataset.copyText;
        navigator.clipboard.writeText(textToCopy).then(() => {
            button.innerHTML = copiedIconSvg;
            button.classList.add('copied');
            button.disabled = true;
            setTimeout(() => {
                button.innerHTML = copyIconSvg;
                button.classList.remove('copied');
                button.disabled = false;
            }, 2000);
        }).catch(err => { console.error('L·ªói khi copy: ', err); });
    }
    // T·∫£i ·∫£nh ng·∫©u nhi√™n t·ª´ unsplash v√† hi·ªÉn th·ªã trong mysteryBox ·ªü giao di·ªán ti·∫øng Anh
    async function fetchRandomImage() {
        if (!mysteryBox || !spinner) return;
        spinner.classList.remove('hidden');
        mysteryBox.classList.add('loading-state');
        const oldImg = mysteryBox.querySelector('img');
        if (oldImg) oldImg.style.opacity = '0.3';

        const apiUrl = `https://api.unsplash.com/photos/random?client_id=${UNSPLASH_ACCESS_KEY}&query=vietnam&orientation=portrait`;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error('Unsplash API error');
            const data = await response.json();
            const newImage = new Image();
            newImage.src = data.urls.regular;
            newImage.alt = data.alt_description || "Random image from Unsplash";
            newImage.style.opacity = '0';
            newImage.onload = () => {
                mysteryBox.innerHTML = '';
                mysteryBox.appendChild(newImage);
                setTimeout(() => { newImage.style.opacity = '1'; }, 50);
                mysteryBox.classList.remove('loading-state');
            };
            newImage.onerror = () => { throw new Error("Could not load image file."); }
        } catch (error) {
            console.error("Error fetching image:", error);
            mysteryBox.innerHTML = `<p style="color: red; font-size: 0.9em;">Could not load image.</p>`;
        }
    }
    // Hi√™Ãân thiÃ£ l∆∞∆°Ã£t tra c∆∞ÃÅu t∆∞ÃÄ GOOGLE ANALYTICS
    async function displayEventCount() {
        const counterElement = document.getElementById('event-counter');
        if (!counterElement) return;

        try {
            const response = await fetch('/api/get-event-count');
            if (!response.ok) throw new Error('Failed to fetch event count');
            const data = await response.json();

            if (data.totalClicks) {
                // S·ª≠ d·ª•ng toLocaleString ƒë·ªÉ ƒë·ªãnh d·∫°ng s·ªë cho ƒë·∫πp
                const formattedCount = data.totalClicks.toLocaleString(currentLang === 'vi' ? 'vi-VN' : 'en-US');
                // K·∫øt h·ª£p s·ªë v√† nh√£n ƒë√£ d·ªãch
                counterElement.textContent = `${formattedCount} ${t('realtimeTotalLookups', 'l∆∞·ª£t tra c·ª©u')}`;
            }
        } catch (error) {
            console.error("Kh√¥ng th·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£t tra c·ª©u:", error);
            counterElement.textContent = `N/A ${t('realtimeTotalLookups', 'l∆∞·ª£t tra c·ª©u')}`;
        }
    }

    // L·∫•y v√† hi·ªÉn th·ªã d·ªØ li·ªáu ng∆∞∆°ÃÄi truy c√¢Ã£p th·ªùi gian th·ª±c GOOGLE ANALYTICS
    async function displayRealtimeLocations() {
        const listElement = document.getElementById('realtime-locations-list');
        const totalUsersElement = document.getElementById('realtime-total-users');
        if (!listElement || !totalUsersElement) return;

        const oldContent = listElement.innerHTML;
        // Ch·ªâ hi·ªÉn th·ªã "ƒêang t·∫£i..." l·∫ßn ƒë·∫ßu ti√™n
        if (listElement.children.length === 0 || !listElement.textContent.includes(t('realtimeLoading', 'ƒêang t·∫£i...'))) {
            listElement.innerHTML = `<li>${t('realtimeLoading', 'ƒêang t·∫£i...')}</li>`;
        }

        try {
            const response = await fetch('/api/get-realtime-locations');
            if (!response.ok) throw new Error('Failed to fetch realtime locations');
            const data = await response.json();

            if (data.totalActiveUsers !== undefined) {
                const formattedTotal = data.totalActiveUsers.toLocaleString(currentLang === 'vi' ? 'vi-VN' : 'en-US');
                totalUsersElement.textContent = `${formattedTotal} ${t('realtimeTotalUsers', 'ng∆∞·ªùi d√πng tr·ª±c tuy·∫øn')}`;
            }

            if (data.activeLocations && data.activeLocations.length > 0) {
                listElement.innerHTML = '';
                data.activeLocations.forEach(location => {
                    const li = document.createElement('li');
                    const translatedCity = t(`city_${location.city.toLowerCase().replace(/ /g, '_')}`, location.city);
                    let locationDisplay = translatedCity;
                    if (location.country && location.country !== 'Vietnam') {
                        const translatedCountry = t(`country_${location.country.toLowerCase().replace(/ /g, '_')}`, location.country);
                        locationDisplay = `${translatedCity} - ${translatedCountry}`;
                    }
                    const userText = t('realtimeUserFrom', '{count} ng∆∞·ªùi d√πng t·ª´').replace('{count}', location.count);
                    li.innerHTML = `${userText} <strong>${locationDisplay}</strong>`;
                    listElement.appendChild(li);
                });
            } else {
                listElement.innerHTML = `<li>${t('realtimeNoActivity', 'Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o g·∫ßn ƒë√¢y.')}</li>`;
            }
        } catch (error) {
            console.error("Kh√¥ng th·ªÉ hi·ªÉn th·ªã ho·∫°t ƒë·ªông th·ªùi gian th·ª±c:", error);
            listElement.innerHTML = oldContent || `<li>${t('realtimeError', 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu.')}</li>`;
        }
    }

    //C√°c h√†m ch·ª©c nƒÉng Xem ƒë·ªãa ch·ªâ h√†nh ch√≠nh
    function openModal() {
        if (adminCenterModal) {
            adminCenterModal.classList.remove('hidden');
        }
    }

    function closeModal() {
        if (adminCenterModal) {
            adminCenterModal.classList.add('hidden');
        }
    }

    async function handleShowAdminCenters() {
         // GHI CH√ö THAY ƒê·ªîI: Ki·ªÉm tra c·∫£ hai m√£ code c·∫ßn thi·∫øt tr∆∞·ªõc khi ti·∫øp t·ª•c.
        // Bi·∫øn newWardCodeForModal v√† newProvinceCodeForModal s·∫Ω ƒë∆∞·ª£c g√°n trong c√°c h√†m tra c·ª©u.
        if (!newWardCodeForModal || !newProvinceCodeForModal) {
            console.error("Thi·∫øu m√£ x√£ ho·∫∑c t·ªânh ƒë·ªÉ tra c·ª©u trung t√¢m h√†nh ch√≠nh.");
            return;
        }

        openModal();
        modalBody.innerHTML = `<p>${t('loading', 'ƒêang t·∫£i...')}</p>`;

        try {
            // GHI CH√ö THAY ƒê·ªîI: G·ªçi API v·ªõi c·∫£ hai tham s·ªë ward_code v√† province_code.
            const response = await fetch(`/api/get-admin-centers?ward_code=${newWardCodeForModal}&province_code=${newProvinceCodeForModal}`);

            if (!response.ok) throw new Error('Could not fetch administrative centers.');
            const data = await response.json();

            if (data.length > 0) {
                    const listHtml = data.map(item => {
                    // === GHI CH√ö THAY ƒê·ªîI: S·ª≠ d·ª•ng h√†m t() ƒë·ªÉ d·ªãch agency_type ===
                    // 1. X√¢y d·ª±ng kh√≥a d·ªãch, v√≠ d·ª•: "agency_ubnd"
                    const translationKey = `agency_${item.agency_type.toLowerCase()}`;
                    // 2. D√πng h√†m t() ƒë·ªÉ l·∫•y b·∫£n d·ªãch.
                    //    N·∫øu kh√¥ng c√≥, d√πng l·∫°i gi√° tr·ªã g·ªëc v√† vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu.
                    const fallbackName = item.agency_type.charAt(0).toUpperCase() + item.agency_type.slice(1);
                    const agencyName = t(translationKey, fallbackName);
                    // ==========================================================
                    return `
                        <li>
                            <span class="agency-type">${agencyName}</span>
                            <span class="agency-address">${item.address}</span>
                        </li>
                    `;
                }).join('');
                modalBody.innerHTML = `<ul>${listHtml}</ul>`;
            } else {
                modalBody.innerHTML = `<p>${t('noAdminCenterData', 'Kh√¥ng c√≥ d·ªØ li·ªáu.')}</p>`;
            }

        } catch (error) {
            console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ TTHC:", error);
            modalBody.innerHTML = `<p class="error">${error.message}</p>`;
        }
    }

    // --- KH·ªûI CH·∫†Y ·ª®NG D·ª§NG ---
    initialize();
});